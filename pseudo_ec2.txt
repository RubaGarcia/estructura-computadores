#pseudocodigo de encendido y apagado del led
#hay que realizar las funciones de inicializado(void ini_gpio(terminal,funcionamiento))
#el valor terminal indica que terminal hay que habilitar y el funcionamiento es un 
#booleano que indica si es salida o entrada
#solo vamos a trabajar con los pines 10-19
int dir_logica

void ini_gpio(terminal, funcionamiento)
    dir_logica = dirLogica (13, dir_base, 0x100)
    entrar en modo supervisor
    acceder a registro de dir_logica 
    si (salida = 0) {
            poner entrada en el registro
        }
    si (salida = 1) {
    poner salida en el registro (borrar los unos de esa zona y poner el c√≥digo de salida)
    }
    salir de modo supervisor

.globl prog_gpio_11
.globl valor_gpio_11
.set GPBASE, 0x20200000
.set GPSEL1, 0x004
.set GPCLR0, 0x028
.set GPSET0, 0x01C
.data
.align 2
DIRLOGICA: .space 4

.text
prog_gpio_10:
SUB SP, SP, #4
STR R4, [SP,#0]
MOV R4, R0 @muevo el valor de entrada de la subrutina a otr reg
MOV R0, #13 @pongo los valores necesarios para la llamada al sistema
LDR R1, =GPBASE
MOV R2, #0x100
SWI 0x68 @llamada al sistema OS_MEMORY
LDR R0, =DIRLOGICA
STR R3, [R0, #0] @guardo la direccion logica
SWI 0x16 @llamada al sistema para entrar a modo supervisor
LDR R0, [R3, #GPSEL1] @accedo al registro de seleccion del dispositivo GPIO
MOV R1, #0x38 @cargo la mascara
BIC R0, R0, R1 @combino los bits con la mascara
CMP R4, #0 @comparo para comprobar si se quiere de entrada o de salida
BNE SI @si es de salida salto
MOV R1, #0
B PROGRAMA
SI:
MOV R1, #0x8
PROGRAMA:
ORR R0, R0, R1
STR R0, [R3, #GPSEL1] @guardo el contenido en el registro de antes
SWI 0x7C @llamada al sistema para salir del modo supervisor
LDR R4, [SP, #0]
ADD SP, SP, #4
MOV PC, LR







#tiene 2 parametros: el led que se va a encender y si se va a encender o apagar
void valor_led(num_led, salida)
    #ini_gpio(10,entrada)

    #modo supervisor
    #settear el registro de control del led en funcion de encenderse o apagarse
    if salida = 1
        gpset0 = 1
    else 
        gpclr=1
    


valor_gpio_10:
SUB SP, SP, #4
STR R4, [SP, #0]
MOV R4, R0 @muevo el valor que le entra a la subrutina a otro registro
LDR R0, =DIRLOGICA
LDR R3, [R0, #0] @cojo la direccion logica
SWI 0x16 @llamo al sistema para entrar en modo supervisor
CMP R4, #0 @comparo si quiero corriente o no
BNE SET @si quiero corriente salto
MOV R2, #GPCLR0 @muevo a un registro la constante del registro que necesito
B PROG
SET:
MOV R2, #GPSET0
PROG:
LDR R0, [R3, R2]
@accedo al registro que necesito dependiendo si quiero corriente o no
MOV R1, #0x800 @cargo la mascara
BIC R0, R0, R1 @combino el valor del registro con el que quiero
ORR R0,#0x800
STR R0, [R3, R2] @guardo el contenido en el registro del que lo he sacado
SWI 0x7C @llamo al sistema para salir del modo supervisor
LDR R4,[SP, #0]
ADD SP, SP, #4
MOV PC, LR





void main(){
    
    ini_gpio(10,entrada)
    valor _led(1,1)#enciende
    
}


.extern prog_gpio_11
.extern valor_gpio_11
.globl _start

.text
_start:
MOV R0, #1
BL prog_gpio_10 @programo como salida
MOV R4, #0 @valor de encendido
MOV R5, #10 @se enciende 5 veces y se apaga 5 veces
FOR:
CMP R5, #0
BEQ FIN
CMP R4, #0
BNE ENCENDIDO @si esta encendido salto
MOV R4, #1 @si esta apagado pongo un 1
B PROGRAMA
ENCENDIDO:
MOV R4, #0 @si esta encedido pongo 0
PROGRAMA:
MOV R0, R4
BL valor_gpio_10 @enciendo o apago
SUB R5, R5, #1
LDR R1,=2000 @bucle de perdida de tiempo 1 segundo
BUCLE:
CMP R1, #0
BEQ FOR
SUB R1, R1, #1
B BUCLE
FIN:
SWI 0x11